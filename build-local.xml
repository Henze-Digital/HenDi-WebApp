<?xml version="1.0" encoding="UTF-8"?>
<project default="xar" name="HWH-WebApp-local" basedir="." xmlns:unless="ant:unless">
    
    <dirname property="HWH-WebApp.basedir" file="${ant.file.HWH-WebApp}"/>
    
    <!-- import default properties from file -->
    <property file="${HWH-WebApp.basedir}/local.build.properties" prefix="hwh"/>
    <property file="${HWH-WebApp.basedir}/build.properties" prefix="hwh"/>
    <property file="${hwh.wega.repo}/local.build.properties"/>
    <property file="${hwh.wega.repo}/build.properties"/>
    
    <target name="clean">
        <echo>Cleaning task before build. Deleting temp and dist dirs.</echo>
        <delete dir="${hwh.dist.dir}/"/>
        <delete dir="${hwh.dist.tmp.dir}/"/>
        <ant antfile="build.xml" dir="${hwh.wega.repo}/" target="clean"/>
    </target>
    
    <target name="build-wega-xar" depends="clean">
        <echo>Building the WeGA-WebApp.xar</echo>
        <echo>Executing ant xar at WeGA-WebApp repo (build.xml) </echo>
        <ant antfile="build.xml" dir="${hwh.wega.repo}/" target="xar"/>
        <echo>Finished build of WeGA-WebApp. Build successful.</echo>
    </target>
    
    <target name="get-wega-xar-data" depends="build-wega-xar">
        <echo>Get the WeGA-WebApp.xar (unzip to dist dir).</echo>
        <unzip src="${hwh.wega.repo}/build/*.xar" dest="dist"/>
    </target>
    
    <target name="prepare-hwh-specs" depends="clean">
        <echo>Prepare the WebApp-specs for Henze-Digital.</echo>
        <antcall target="prepare-package-files"/>
        <antcall target="prepare-css"/>
        <antcall target="prepare-hwh-odd"/>
    </target>
    
    <target name="prepare-package-files">
        <echo>Create expath-pkg.xml</echo>
        <copy file="data/expath-pkg.xml.tmpl" tofile="${hwh.dist.tmp.dir}/expath-pkg.xml" filtering="true" overwrite="true">
            <filterset>
                <filter token="project.app" value="${hwh.project.app}"/>
                <filter token="project.name" value="${hwh.project.name}"/>
                <filter token="project.version" value="${hwh.project.version}"/>
            </filterset>
        </copy>
        <echo>Create repo.xml</echo>
        <copy file="data/repo.xml.tmpl" tofile="${hwh.dist.tmp.dir}/repo.xml" filtering="true" overwrite="true">
            <filterset>
                <filter token="project.app" value="${hwh.project.app}"/>
                <filter token="project.author" value="${hwh.project.author}"/>
                <filter token="project.name" value="${hwh.project.name}"/>
            </filterset>
        </copy>
    </target>
    
    <target name="prepare-css">
        <echo>Get sass data from WeGA</echo>
        <copy todir="${hwh.dist.tmp.dir}/resources/sass/">
            <fileset dir="${hwh.wega.repo}/resources/sass/">
                <include name="**/*.*"/>
            </fileset>
        </copy>
        <echo>Get sass data from Henze-Digital</echo>
        <copy todir="${hwh.dist.tmp.dir}/resources/sass/" overwrite="yes">
            <fileset dir="data/resources/sass/">
                <include name="**/*.*"/>
            </fileset>
        </copy>
        <echo>Create CSS files via sass</echo>
        <copy todir="${hwh.dist.tmp.dir}/" overwrite="yes">
            <fileset dir="${hwh.wega.repo}/">
                <include name="node_modules/bootstrap/**"/>
                <include name="node_modules/font-awesome/**"/>
            </fileset>
        </copy>
        <exec executable="${hwh.wega.repo}/${dev_libs.dir}/sass/sass.js">
            <arg line="${hwh.dist.tmp.dir}/resources/sass/main.scss ${hwh.dist.tmp.dir}/resources/css/styles.css"/>
        </exec>
        <echo>Run minify on CSS files</echo>
        <apply executable="${hwh.wega.repo}/${dev_libs.dir}/minify/bin/minify.js" parallel="false">
            <fileset dir="${hwh.dist.tmp.dir}/resources/css" includes="*.css" excludes="*min.css"/>
            <redirector>
                <outputmapper type="glob" from="*.css" to="${hwh.dist.tmp.dir}/resources/css/*-min.css"/>
            </redirector>
        </apply>
    </target>
    
    <target name="prepare-hwh-odd">
        <echo>Get HWH-ODD data</echo>
        <copy todir="${hwh.dist.tmp.dir}/HWH-ODD">
            <fileset dir="${hwh.odd.repo}">
                <include name="compiled-ODD/*.xml"/>
                <include name="src/**/*.xml"/>
            </fileset>
        </copy>
    </target>
    
    <target name="update-dist" depends="get-wega-xar-data, prepare-hwh-specs">
        <echo>Override the unzipped WeGA-WebApp data with hwh-webapp specs</echo>
        <echo>Copy hwh-spec data.</echo>
        <copy todir="${hwh.dist.dir}/" overwrite="yes">
            <fileset dir="data/">
                <include name="catalogues/"/>
                <include name="resources/favicons/"/>
                <include name="templates/"/>
                <include name="controller.xql"/>
                <include name="README.md"/>
                <include name="LICENSE"/>
                <exclude name="*.tmpl"/>
            </fileset>
        </copy>
        <echo>Copy processed hwh-spec data (dist-tmp)</echo>
        <copy todir="${hwh.dist.dir}" overwrite="yes">
            <fileset dir="${hwh.dist.tmp.dir}">
                <include name="*.*"/>
                <include name="resources/"/>
                <include name="templates/"/>
                <exclude name="node_modules/"/>
            </fileset>
        </copy>
        <echo>Add icon.png</echo>
        <copy todir="${hwh.dist.dir}" overwrite="yes">
            <file file="${hwh.secrets.repo}/img/icon.png"/>
        </copy>
        <echo>Add image files to resources/img</echo>
        <copy todir="${hwh.dist.dir}/resources/img/" overwrite="yes">
            <fileset dir="${hwh.secrets.repo}/img/">
                <include name="*.png"/>
                <include name="*.jpg"/>
                <exclude name="icon.png"/>
            </fileset>
        </copy>
        <echo>Add favicons.</echo>
        <copy todir="${hwh.dist.dir}/resources/favicons" overwrite="yes">
            <fileset dir="${hwh.secrets.repo}/">
                <include name="favicon*.png"/>
            </fileset>
        </copy>
        
        <echo>Override the WeGA-ODD with HWH-ODD data</echo>
        <delete file="${hwh.dist.dir}/resources/lib/WeGA-ODD/build.xml"/>
        <copy todir="${hwh.dist.dir}/resources/lib/WeGA-ODD" overwrite="yes">
            <fileset dir="${hwh.dist.tmp.dir}/HWH-ODD">
                <include name="**/*.*"/>
            </fileset>
        </copy>
        <echo>Override the WeGA Guidelines with the Henze-Digital Guidelines</echo>
        <delete file="${hwh.dist.dir}/guidelines/*.*"/>
        <copy todir="${hwh.dist.dir}/guidelines">
            <fileset dir="${hwh.dist.tmp.dir}/HWH-ODD/compiled-ODD">
                <include name="*.xml"/>
            </fileset>
        </copy>
    </target>
    
    <target name="xar" depends="update-dist">
        <echo>Creating the xar Package (zipping).</echo>
        <zip destfile="build/${hwh.project.app}-${hwh.project.version}.xar">
            <fileset dir="${hwh.dist.dir}"/>
        </zip>
    </target>
    
    <target name="deploy" depends="xar">
        <echo>Starting auto deploy for eXist-db</echo>
        <path id="classpath.eXist5">
            <fileset dir="${hwh.exist5.libs}" erroronmissingdir="no">
                <include name="*.jar"/>
            </fileset>
        </path>
        <typedef resource="org/exist/ant/antlib.xml" uri="http://exist-db.org/ant">
            <classpath refid="classpath.eXist5"/>
        </typedef>
        <!-- store xar-file in eXist-db -->
        <xdb:store xmlns:xdb="http://exist-db.org/ant" uri="${hwh.exist.db}/tmp" createcollection="true" createsubcollections="true" user="${hwh.exist.user}" password="${hwh.exist.pass}" failonerror="true">
            <fileset file="${hwh.build.dir}/${hwh.project.app}-${hwh.project.version}.xar"/>
        </xdb:store>
        <!-- Deploy the xar -->
        <xdb:xquery xmlns:xdb="http://exist-db.org/ant" uri="${hwh.exist.db}" user="${hwh.exist.user}" password="${hwh.exist.pass}"> ( if("${hwh.project.name}" = repo:list()) then ( repo:undeploy("${hwh.project.name}"), repo:remove("${hwh.project.name}") )
            else (), repo:install-and-deploy-from-db("/db/tmp/${hwh.project.app}-${hwh.project.version}.xar") ) </xdb:xquery>
    </target>
</project>
