<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="HenDi-ODD" default="letters">
    
    <!-- import default properties from file -->
    <property file="local.build.properties"/>
    <property file="build.properties"/>
    
    <condition property="lang" value="${lang}" else="de">
        <isset property="lang"/>
    </condition>
    
    <target name="works" depends="worksMEI, worksTEI"/>
    <target name="tei" depends="letters, orgs, persons, places, biblio, reviews, news, documents, thematicCommentaries, var, worksTEI"/>
    <target name="mei" depends="worksMEI"/>
    <target name="all" depends="tei, mei"/>
    
    <target name="dir.check">
        <condition property="dir.exists">
            <available file="${compiledODD.dir}" type="dir"/>
        </condition>
    </target>
    
    <target name="init" depends="dir.check" unless="dir.exists">
        <mkdir dir="${compiledODD.dir}"/>
    </target>
    
    <target name="clean">
        <delete>
           <fileset dir="schema/en">
              <include name="*.isosch"/>
           </fileset>
            <fileset dir="schema/de">
                <include name="*.isosch"/>
            </fileset>
        </delete>
    </target>
    
    <target name="biblio" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhBiblio.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhBiblio.isosch"/>
            <param name="selectedSchema" value="hwhBiblio"/>
        </antcall>
    </target>
    
    <!--<target name="diaries" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhDiaries.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhDiaries.isosch"/>
            <param name="selectedSchema" value="hwhDiaries"/>
        </antcall>
    </target>-->
    
    <target name="documents" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhDocuments.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhDocuments.isosch"/>
            <param name="selectedSchema" value="hwhDocuments"/>
        </antcall>
    </target>
    
    <target name="letters" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhLetters.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhLetters.isosch"/>
            <param name="selectedSchema" value="hwhLetters"/>
        </antcall>
    </target>
    
    <target name="news" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhNews.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhNews.isosch"/>
            <param name="selectedSchema" value="hwhNews"/>
        </antcall>
    </target>
    
    <target name="orgs" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhOrgs.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhOrgs.isosch"/>
            <param name="selectedSchema" value="hwhOrgs"/>
        </antcall>
    </target>
    
    <target name="persons" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhPersons.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhPersons.isosch"/>
            <param name="selectedSchema" value="hwhPersons"/>
        </antcall>
    </target>
    
    <target name="places" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhPlaces.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhPlaces.isosch"/>
            <param name="selectedSchema" value="hwhPlaces"/>
        </antcall>
    </target>
    
    <target name="reviews" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhReviews.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhReviews.isosch"/>
            <param name="selectedSchema" value="hwhReviews"/>
        </antcall>
    </target>
    
    <target name="thematicCommentaries" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhThematicCommentaries.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhThematicCommentaries.isosch"/>
            <param name="selectedSchema" value="hwhThematicCommentaries"/>
        </antcall>
    </target>
    
    <target name="var" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhVar.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhVar.isosch"/>
            <param name="selectedSchema" value="hwhVar"/>
        </antcall>
    </target>
    
    <target name="worksMEI" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhWorksMEI.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhWorksMEI.isosch"/>
            <param name="selectedSchema" value="hwhWorksMEI"/>
            <param name="source" value="${mei.source}"/>
        </antcall>
    </target>
    
    <target name="worksTEI" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhWorksTEI.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhWorksTEI.isosch"/>
            <param name="selectedSchema" value="hwhWorksTEI"/>
            <param name="source" value="${mei.source}"/>
        </antcall>
    </target>
    
    <!-- processing schema -->
    <target name="process">
        <basename property="inputFile.basename" file="${inputFile}" suffix=".xml"/>
        <!-- TEI is considered default source -->
        <condition property="source" value="${source}" else="${tei.source}">
            <isset property="source"/>
        </condition>
        <sequential>
            <echo>Expanding ODD file</echo>
            <xslt force="yes" style="${stylesheets.dir}/odds/odd2odd.xsl" 
                in="${inputFile}" out="${compiledODD.dir}/${inputFile.basename}-${selectedSchema}.compiled.xml">
                <factory name="net.sf.saxon.TransformerFactoryImpl">
                    <attribute name="http://saxon.sf.net/feature/xinclude-aware" value="true"/>
                </factory>
                <param name="lang" expression="${lang}" if="lang"/>
                <param name="defaultSource" expression="${source}"/>
                <param name="selectedSchema" expression="${selectedSchema}"/>
            </xslt>
            
            <echo>Generate html guidelines</echo>
            <xslt force="yes" style="${stylesheets.dir}/odds/odd2html.xsl" 
                in="${compiledODD.dir}/${inputFile.basename}-${selectedSchema}.compiled.xml" out="guidelines-html/${inputFile.basename}-${selectedSchema}.html">
                <factory name="net.sf.saxon.TransformerFactoryImpl">
                    <attribute name="http://saxon.sf.net/feature/xinclude-aware" value="true"/>
                </factory>
                <param name="lang" expression="${lang}" if="lang"/>
                <param name="defaultSource" expression="${source}"/>
                <param name="selectedSchema" expression="${selectedSchema}"/>
            </xslt>
            
            <echo>Creating RelaxNG schema</echo>
            <xslt force="yes" style="${stylesheets.dir}/profiles/default/relaxng/to.xsl" 
                in="${compiledODD.dir}/${inputFile.basename}-${selectedSchema}.compiled.xml" out="${outputFileRNG}">
                <factory name="net.sf.saxon.TransformerFactoryImpl">
                    <attribute name="http://saxon.sf.net/feature/xinclude-aware" value="true"/>
                </factory>
                <param name="inputDir" expression="${basedir}/"/>
                <!-- supply name of language-->
                <param name="lang" expression="${lang}" if="lang"/>
                <param name="doclang" expression="${lang}" if="lang"/>
                <param name="documentationLanguage" expression="${lang}" if="lang"/>
                <!-- emit some diagnostics"-->
                <param name="debug" expression="${debug}" if="debug"/>
                <!-- be verbose-->
                <param name="verbose" expression="${verbose}" if="verbose"/>
            </xslt>
            
            <echo>Extracting Schematron rules</echo>
            <xslt processor="trax" force="yes" 
                style="${stylesheets.dir}/profiles/default/schematron/to.xsl" 
                in="${compiledODD.dir}/${inputFile.basename}-${selectedSchema}.compiled.xml" out="${outputFileSchematron}">
                <factory name="net.sf.saxon.TransformerFactoryImpl"/>
            </xslt>
        </sequential>
    </target>
    
</project>
