<?xml version="1.0" encoding="utf-8"?>
<schema xmlns="http://purl.oclc.org/dsdl/schematron" queryBinding="xslt2">
   <title>ISO Schematron rules</title>
   <!-- This file generated 2022-04-29T08:47:01Z by 'extract-isosch.xsl'. -->
   <!-- ********************* -->
   <!-- namespaces, declared: -->
   <!-- ********************* -->
   <ns uri="https://henze-digital.de/ns/xslt-functions" prefix="hwh-xsl"/>
   <ns uri="https://henze-digital.de/ns/xslt-functions" prefix="hwh-xsl"/>
   <ns uri="http://www.functx.com" prefix="functx"/>
   <!-- ********************* -->
   <!-- namespaces, implicit: -->
   <!-- ********************* -->
   <ns prefix="tei" uri="http://www.tei-c.org/ns/1.0"/>
   <!-- ************ -->
   <!-- constraints: -->
   <!-- ************ -->
   <pattern id="schematron-constraint-hwhOrgs-att.written-hand-hand-reference-1">
      <rule context="tei:*[@hand]">
         <assert test="id(substring(@hand,2)) or starts-with(@hand, 'hwh:')">There must be an element with the xml:id = "<value-of select="substring(@hand,2)"/>" which is the target of this @hand.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-att.breaking-break-hyphenation-whitespace-2">
      <rule context="tei:*[@break]">
         <report test="matches((following-sibling::text() | following-sibling::element())[1], '^\s') or matches((preceding-sibling::text() | preceding-sibling::element())[last()], '\s$')">There must not be any whitespace before or after the <name/> element when the @break attribute is applied.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-att.datable.w3c-att-datable-w3c-when-3">
      <rule context="tei:*[@when]">
         <report test="@notBefore|@notAfter|@from|@to" role="nonfatal">The @when attribute cannot be used with any other att.datable.w3c attributes.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-att.datable.w3c-att-datable-w3c-from-4">
      <rule context="tei:*[@from]">
         <report test="@notBefore" role="nonfatal">The @from and @notBefore attributes cannot be used together.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-att.datable.w3c-att-datable-w3c-to-5">
      <rule context="tei:*[@to]">
         <report test="@notAfter" role="nonfatal">The @to and @notAfter attributes cannot be used together.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-att.datable-calendar-calendar-6">
      <rule context="tei:*[@calendar]">
         <assert test="string-length(.) gt 0"> @calendar indicates one or more systems or calendars to
              which the date represented by the content of this element belongs, but this
              <name/> element has no textual content.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-att.typed-subtypeTyped-7">
      <rule context="tei:*[@subtype]">
         <assert test="@type">The <name/> element should not be categorized in detail with @subtype unless also categorized in general with @type</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-p-abstractModel-structure-p-8">
      <rule context="tei:p">
         <report test="(ancestor::tei:p or ancestor::tei:ab)                          and not(parent::tei:exemplum                         |parent::tei:item                         |parent::tei:note                         |parent::tei:q                         |parent::tei:quote                         |parent::tei:remarks                         |parent::tei:said                         |parent::tei:sp                         |parent::tei:stage                         |parent::tei:cell                         |parent::tei:figure                         |parent::tei:footNote)">
                        Abstract model violation: Paragraphs may not contain other paragraphs or ab elements.
                    </report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-p-abstractModel-structure-l-9">
      <rule context="tei:p">
         <report test="(ancestor::tei:l or ancestor::tei:lg)                          and not(parent::tei:figure or parent::tei:note or ancestor::tei:floatingText or parent::tei:footNote)">
                        Abstract model violation: Lines may not contain higher-level structural elements such as div, p, or ab, unless p is a child of figure or note, or is a descendant of floatingText.
                    </report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-desc-deprecationInfo-only-in-deprecated-10">
      <rule context="tei:desc[ @type eq 'deprecationInfo']">
         <assert test="../@validUntil">Information about a
        deprecation should only be present in a specification element
        that is being deprecated: that is, only an element that has a
        @validUntil attribute should have a child &lt;desc
        type="deprecationInfo"&gt;.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-sic-empty-sic-11">
      <rule context="tei:sic">
         <report test="normalize-space(.) = ''">ein sic sollte immer Text enthalten. Alternativ kann ein supplied oder gap eingesetzt werden.</report>
      </rule>
   </pattern>
   <pattern is-a="node-typeNkey">
      <param name="node" value="tei:name"/>
   </pattern>
   <pattern is-a="node-typeNkey">
      <param name="node" value="tei:rs"/>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-date-dateHeuristics2-14">
      <rule context="tei:date[@notBefore castable as xs:date and @notAfter castable as xs:date]">
         <report test="xs:date(@notBefore) gt xs:date(@notAfter)">the date value of notBefore is later than notAfter</report>
      </rule>
      <rule context="tei:date[@notBefore castable as xs:gYear and @notAfter castable as xs:gYear]">
         <report test="xs:date(concat(@notBefore, '-01-01')) gt xs:date(concat(@notAfter, '-01-01'))">the date value of notBefore is later than notAfter</report>
      </rule>
      <rule context="tei:date[@notBefore castable as xs:gYear and @notAfter castable as xs:date]">
         <report test="xs:date(concat(@notBefore, '-01-01')) gt xs:date(@notAfter)">the date value of notBefore is later than notAfter</report>
      </rule>
      <rule context="tei:date[@notBefore castable as xs:date and @notAfter castable as xs:gYear]">
         <report test="xs:date(@notBefore) gt xs:date(concat(@notAfter, '-12-31'))">the date value of notBefore is later than notAfter</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-date-dateHeuristics3-15">
      <rule context="tei:date">
         <report test="(@from or @to) and (@when or @notAfter or @notBefore)">cooccurence of date and duration attributes</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-date-dateHeuristics4-16">
      <rule context="tei:date">
         <report test="@when and (@notAfter or @notBefore)">cooccurence of exact and uncertain date attributes</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-date-dateHeuristics5-17">
      <rule context="tei:date">
         <assert test="@when or @notBefore or @notAfter or @from or @to or @cert='unknown' or matches(., '0000|o\.J\.|unknown') or ancestor::tei:text">tei:date benötigt ein Attribut @when, @notBefore o.ä.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-date-dateHeuristics6-18">
      <rule context="tei:date[some $i in (@when, @notBefore, @notAfter, @from, @to) satisfies $i castable as xs:date]">
         <report test="every $j in (@when, @notBefore, @notAfter, @from, @to)[. castable as xs:date] satisfies xs:date($j) gt current-date()">some attribute value of <name/> is greater than the current date</report>
      </rule>
      <rule context="tei:date[some $i in (@when, @notBefore, @notAfter, @from, @to) satisfies $i castable as xs:gYear]">
         <report test="every $j in (@when, @notBefore, @notAfter, @from, @to)[. castable as xs:gYear] satisfies number($j) gt year-from-date(current-date())">some attribute value of <name/> is greater than the current date</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-date-julian-before-1582-19">
      <rule context="tei:date[@calendar='Julian']">
         <report test="some $i in (@when, @notBefore, @notAfter, @from, @to) satisfies $i lt '1582-10-15'">Before October 15, 1582 the default calendar is Julian so no extra calendar declaration is needed.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-ptr-ptr-target-20">
      <rule context="tei:ptr[not(starts-with(@target, 'http'))]">
         <assert test="following::tei:note[@xml:id=substring(current()/@target,2)]">
                       The note element indicated by @target (<value-of select="@target"/>) must follow the current element <name/>. 
                        Otherwise the target must be some external URL prefixed with 'http'.
                    </assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-ptr-duplicate-ptr-21">
      <rule context="tei:ptr">
         <report test="following::tei:ptr[@target=current()/@target]">
                   There must be only one pointer with the @target (<value-of select="@target"/>)
                </report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-ptr-ptrAtts-22">
      <rule context="tei:ptr">
         <report test="@target and @cRef">Only one of the
attributes @target and @cRef may be supplied on <name/>.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-ref-prev-next-correspContext-23">
      <rule context="tei:ref">
         <report test="@type=('previousLetterFromAddressee', 'nextLetterFromAddressee') and not(parent::tei:correspContext)">'previousLetterFromAddressee' and 'nextLetterFromAddressee' are only used within the correspContext element.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-ref-refAtts-24">
      <rule context="tei:ref">
         <report test="@target and @cRef">Only one of the
	attributes @target' and @cRef' may be supplied on <name/>
         </report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-list-gloss-list-25">
      <rule context="tei:list">
         <report test="./tei:label and not(@type='gloss')">Labels are only allowed in lists of type='gloss'</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-list-gloss-list-must-have-labels-26">
      <rule context="tei:list[@type='gloss']">
         <assert test="tei:label">The content of a "gloss" list should include a sequence of one or more pairs of a label element followed by an item element</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-note-note-in-text-27">
      <rule context="tei:note[not(parent::tei:org or parent::tei:person or parent::tei:notesStmt or parent::tei:biblStruct or parent::tei:imprint or @type=('addInfo','comment'))]">
         <assert test="@resp">It is required to give a responsibillity (@resp) on note.</assert>
      </rule>
      <rule context="tei:note[not(parent::tei:org or parent::tei:person or parent::tei:notesStmt or parent::tei:biblStruct or parent::tei:imprint)]">
         <report test="@type and @resp and @xml:id">It is recommended to provide @type and @resp and @xml:id on note.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-note-text-notes-28">
      <rule context="tei:note[not(parent::tei:notesStmt)]">
         <report test="@type=('editorial', 'summary', 'incipit')">The note types 'editorial', 'summary', or 'thematicCom' are not allowed within the text section but only in the notesStmt.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-note-thematicCom-target-29">
      <rule context="tei:note[@type='thematicCom' or @target]">
         <assert test="@type='thematicCom' and @target">You need to provide thematic commentary targets (Only @type='thematicCom' and @target go together!).</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-note-thematicCom-must-be-empty-30">
      <rule context="tei:note[@type='thematicCom' or @target]">
         <report test="normalize-space() ne''">Thematic commentaries must not contain any text.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-note-notesStmt-notes-31">
      <rule context="tei:note[parent::tei:notesStmt]">
         <assert test="@type=('editorial', 'summary', 'thematicCom', 'incipit', 'textConst')">Within the notesStmt only 'editorial', 'summary', 'textConst', or 'thematicCom' are allowed for @type on note.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-note-structured-content-notes-32">
      <rule context="tei:note[parent::tei:notesStmt][tei:p|tei:list|tei:table]">
         <report test="text()[matches(., '\w')] or *[not(self::tei:p or self::tei:list or self::tei:table)]">There must be no mixed content when a tei:p, tei:list, or tei:table is present.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-note-initial-uppercase-commentaries-33">
      <rule context="tei:note[@type='commentary'][not(*[1]/self::tei:q or *[1]/self::tei:quote)]">
         <assert test="matches(replace(normalize-unicode(normalize-space(.), 'NFKD'),  '[\p{M}]', ''), '^[A-Z0-9]')">Commentary notes must start with an upper case letter.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-author-sameAs-sameAs-reference-34">
      <rule context="tei:author[@sameAs]">
         <assert test="id(substring(@sameAs,2)) or starts-with(@sameAs, 'wega:')">There must be an element with the xml:id = "<value-of select="substring(@sameAs,2)"/>" which is the target of this @sameAs.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-title-report-type-outside-text-35">
      <rule context="tei:title">
         <report test=".[@type]/ancestor::tei:teiHeader">Do not use the <emph>type</emph> attribute here!</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-title-duplicate-title-36">
      <rule context="tei:title[following-sibling::tei:title]">
         <let name="level" value="@level"/>
         <let name="type" value="string(@type)"/>
         <let name="lang" value="string(@xml:lang)"/>
         <report test="following-sibling::tei:title[@level = $level][string(@xml:lang) = $lang][string(@type) = $type]">Following title without differing @type or xml:lang attribute</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-title-punctuation-mark-37">
      <rule context="tei:title">
         <report test="matches(normalize-space(self::tei:title), '[\.,;]$') and not(matches(normalize-space(self::tei:title), '((\p{Lu})|(\setc)|(\sal)|([\s\.]a)|(\sBl)|(\sAufl))\.$'))">Found a non-valid punctuation mark at the end of <name/>
         </report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-title-report-leading-zeros-38">
      <rule context="tei:title">
         <report test="matches(., '\s0\d+\.')">please do not prefix numbers with a zero</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-title-report-quotation-marks-39">
      <rule context="tei:title">
         <report test="matches(., '&#34;“„')">please replace literal quotation marks with q-tags</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-l-abstractModel-structure-l-40">
      <rule context="tei:l">
         <report test="ancestor::tei:l[not(.//tei:note//tei:l[. = current()])]">
        Abstract model violation: Lines may not contain lines or lg elements.
      </report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-idno-types-match-external-identifiers-41">
      <rule context="tei:idno[@type='gnd']">
         <assert test="matches(., '^1[01]?\d{7}[0-9X]|[47]\d{6}-\d|[1-9]\d{0,7}-[0-9X]|3\d{7}[0-9X]$')">That doesn't look like a valid GND ID.</assert>
      </rule>
      <rule context="tei:idno[@type='viaf']">
         <assert test="matches(., '^[1-9]\d(\d{0,7}|\d{17,20})$')">That doesn't look like a valid VIAF ID.</assert>
      </rule>
      <rule context="tei:idno[@type='geonames']">
         <assert test="matches(., '^[1-9][0-9]{0,8}$')">That doesn't look like a valid Geonames ID.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-idno-match-external-identifiers-42">
      <rule context="tei:idno[parent::tei:place]">
         <report test="@type=('bd')">Bach IDs are not meant for places.</report>
      </rule>
      <rule context="tei:idno[parent::tei:person]">
         <report test="@type=('geonames')">Geonames IDs are not meant for persons.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-orgName-orgNameKeyRequirement-43">
      <rule context="tei:orgName[not(parent::tei:org)]">
         <assert test="@key" role="warning">A <name/> should be used for identification.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-orgName-parent-org-44">
      <rule context="tei:orgName[parent::tei:org and not(ancestor::tei:listOrg)]">
         <report test="@key or not(@type)">It is required to give the type ('alt' or 'reg') of the name while @key is forbiden here.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-orgName-parent-org-reg-45">
      <rule context="tei:orgName[parent::tei:org and not(preceding::tei:orgName) and not(ancestor::tei:listOrg)]">
         <assert test="@type='reg'">There must exactly be one name with @type='reg'.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-orgName-parent-org-reg-46">
      <rule context="tei:orgName[parent::tei:org and preceding::tei:orgName and not(ancestor::tei:listOrg)]">
         <report test="@type='reg'">Only the first name can be of @type='reg'. Following names are supposed to be alternative names, @type='alt'.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-orgName-parent-not-org-47">
      <rule context="tei:orgName[not(parent::tei:org)]">
         <report test="@type">No @type attribute allowed here.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-persName-persNameKeyRequirement-48">
      <rule context="tei:persName[not(parent::tei:person)]">
         <assert test="@key" role="warning">A <name/> should be used for identification.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-event-org-events-49">
      <rule context="tei:event">
         <assert test="tei:label=('Beginn der Tätigkeit', 'Einstellung der Tätigkeit')">label for event should be 'Beginn der Tätigkeit' or 'Einstellung der Tätigkeit'.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-org-listorg-org-status-50">
      <rule context="tei:org[not(parent::tei:listOrg)]">
         <assert test="@status">@status is missing.</assert>
      </rule>
      <rule context="tei:org[parent::tei:listOrg]">
         <report test="@status">@status is only for use at the root element.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-org-listorg-org-source-51">
      <rule context="tei:org[not(parent::tei:listOrg)]">
         <assert test="@source">@source is missing.</assert>
      </rule>
      <rule context="tei:org[parent::tei:listOrg]">
         <report test="@source">@source is only for use at the root element.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-subst-substContents1-52">
      <rule context="tei:subst">
         <assert test="child::tei:add and (child::tei:del or child::tei:surplus)">
            <name/> must have at least one child add and at least one child del or surplus</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-seg-activeOrPassivePerformance-53">
      <rule context="tei:seg">
         <report test="./@subtype = ('active', 'passive') and not(./@type = 'performance')">if @subtype contains 'active' or 'passive' @type has to be 'performance'</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-seg-AddresseeOrSenderCorrespondence-54">
      <rule context="tei:seg">
         <report test="./@subtype = ('sender', 'addressee') and not(./@type = 'correspondence')">if @subtype contains 'sender' or 'addressee' @type has to be 'correspondence'</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-styleguide-document-node-content-55">
      <rule context="document-node()">
         <report test="count(processing-instruction()) ne 2">Henze-Digital styleguide error: there should exactly be two processing instructions before the root element</report>
         <report test="comment()">Henze-Digital styleguide error: there should be no comments outside the root element</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-whitespaceOnlyContent-56">
      <rule context="tei:surname | tei:forename | tei:persName | tei:author[not(@sameAs)] | tei:occupation | tei:settlement | tei:country | tei:region | tei:rs | tei:workName | tei:characterName | tei:hi[not(.//tei:gap)] | tei:head | tei:note[not(@type=('thematicCom'))] | tei:placeName | tei:title | tei:seg | tei:item[not(@* or *)] | tei:term">
         <report test="normalize-space(.) = ''">
            <name/> has whitespace only content</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-elementStartsWithWhitespace-57">
      <rule context="tei:surname | tei:forename | tei:persName[not(@type)][not(./child::element())] | tei:author | tei:occupation | tei:settlement[not(tei:address)][not(./child::element())] | tei:country | tei:region | tei:rs[not(./child::element())] | tei:workName | tei:characterName | tei:hi | tei:placeName[not(parent::tei:address or parent::tei:birth or parent::tei:death)][not(./child::element())]">
         <report test="matches(.,'^\s') and (node()[1] = text()[1])">whitespace at the beginning of element <name/>
         </report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-untrimmedAttributeValues-58">
      <rule context="*">
         <report test="some $i in @* satisfies string-length(normalize-unicode(normalize-space(replace($i, ' | | | ', ' ')))) ne string-length($i)">There is some whitespace here at the beginning or end of some attribute value.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-hwhTargets-59">
      <rule context="*[starts-with(@target, 'hwh:')]">
         <assert test="matches(@target, '^hwh:A\d{2}[0-9A-F]{5}(#.+)?(\s+hwh:A\d{2}[0-9A-F]{5}(#.+)?)*$')">"hwh"-prefixed URIs must follow the pattern "hwh:A\d{2}[0-9A-F]{5}" (i.e. without any file extension)</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-emojiCheck-60">
      <rule context="*[some $i in text() satisfies normalize-space($i) ne '']">
         <report test="matches(.,                         '[⌚-⌛]|[⏩-⏬]|[⏰]|[⏳]|[◽-◾]|[☔-☕]|[♈-♓]|[♿]|[⚓]|[⚡]|[⚪-⚫]|[⚽-⚾]|[⛄-⛅]|[⛎]|[⛔]|[⛪]|[⛲-⛳]|[⛵]|[⛺]|[⛽]|[✅]|[✊-✋]|[✨]|[❌]|[❎]|[❓-❕]|[❗]|[➕-➗]|[➰]|[➿]|[⬛-⬜]|[⭐]|[⭕]|[🀄]|[🃏]|[🆎]|[🆑-🆚]|[🇦-🇿]|[🈁]|[🈚]|[🈯]|[🈲-🈶]|[🈸-🈺]|[🉐-🉑]|[🌀-🌠]|[🌭-🌯]|[🌰-🌵]|[🌷-🍼]|[🍾-🍿]|[🎀-🎓]|[🎠-🏄]|[🏅]|[🏆-🏊]|[🏏-🏓]|[🏠-🏰]|[🏴]|[🏸-🏿]|[🐀-🐾]|[👀]|[👂-📷]|[📸]|[📹-📼]|[📿]|[🔀-🔽]|[🕋-🕎]|[🕐-🕧]|[🕺]|[🖕-🖖]|[🖤]|[🗻-🗿]|[😀]|[😁-😐]|[😑]|[😒-😔]|[😕]|[😖]|[😗]|[😘]|[😙]|[😚]|[😛]|[😜-😞]|[😟]|[😠-😥]|[😦-😧]|[😨-😫]|[😬]|[😭]|[😮-😯]|[😰-😳]|[😴]|[😵-🙀]|[🙁-🙂]|[🙃-🙄]|[🙅-🙏]|[🚀-🛅]|[🛌]|[🛐]|[🛑-🛒]|[🛕]|[🛫-🛬]|[🛴-🛶]|[🛷-🛸]|[🛹]|[🛺]|[🟠-🟫]|[🤍-🤏]|[🤐-🤘]|[🤙-🤞]|[🤟]|[🤠-🤧]|[🤨-🤯]|[🤰]|[🤱-🤲]|[🤳-🤺]|[🤼-🤾]|[🤿]|[🥀-🥅]|[🥇-🥋]|[🥌]|[🥍-🥏]|[🥐-🥞]|[🥟-🥫]|[🥬-🥰]|[🥱]|[🥳-🥶]|[🥺]|[🥻]|[🥼-🥿]|[🦀-🦄]|[🦅-🦑]|[🦒-🦗]|[🦘-🦢]|[🦥-🦪]|[🦮-🦯]|[🦰-🦹]|[🦺-🦿]|[🧀]|[🧁-🧂]|[🧃-🧊]|[🧍-🧏]|[🧐-🧦]|[🧧-🧿]|[🩰-🩳]|[🩸-🩺]|[🪀-🪂]|[🪐-🪕]')">Text contains characters with Emoji presentation as default.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-sourceMustResolve-61">
      <rule context="*[starts-with(@source, '#')]">
         <let name="source" value="@source"/>
         <assert test="id(substring($source,2))">Unable to locate the reference provided by the @source attribute.</assert>
      </rule>
   </pattern>
   <schema queryBinding="xslt2">
      <function xmlns="http://www.w3.org/1999/XSL/Transform" name="hwh-xsl:int2hex">
         <param name="number" as="xs:int"/>
         <variable name="chars"
                   select="('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F')"/>
         <variable name="div" select="$number div 16"/>
         <variable name="count" select="floor($div)"/>
         <variable name="remainder" select="($div - $count) * 16"/>
         <value-of select="concat(if($count gt 15) then hwh-xsl:int2hex(xs:integer($count))                             else if($number gt 15) then $chars[$count +1]                             else (),                             $chars[$remainder +1])"/>
      </function>
      <function xmlns="http://www.w3.org/1999/XSL/Transform"
                name="hwh-xsl:compute-check-digit">
         <param name="id" as="xs:string"/>
         <variable name="weights" select="(2, 4, 6, 8, 9, 5, 3)"/>
         <variable name="str2codepts" select="string-to-codepoints($id)"/>
         <variable name="str2codepts-1" select="$str2codepts[1] * $weights[1]"/>
         <variable name="str2codepts-2" select="$str2codepts[2] * $weights[2]"/>
         <variable name="str2codepts-3" select="$str2codepts[3] * $weights[3]"/>
         <variable name="str2codepts-4" select="$str2codepts[4] * $weights[4]"/>
         <variable name="str2codepts-5" select="$str2codepts[5] * $weights[5]"/>
         <variable name="str2codepts-6" select="$str2codepts[6] * $weights[6]"/>
         <variable name="str2codepts-7" select="$str2codepts[7] * $weights[7]"/>
         <variable name="sum"
                   select="sum(($str2codepts-1, $str2codepts-2, $str2codepts-3, $str2codepts-4, $str2codepts-5, $str2codepts-6, $str2codepts-7))"/>
         <value-of select="hwh-xsl:int2hex(xs:int($sum mod 16))"/>
      </function>
      <function xmlns="http://www.w3.org/1999/XSL/Transform"
                name="hwh-xsl:checkIdByCheckDigit">
         <param name="str" as="xs:string"/>
         <variable name="idStr" select="substring($str, 1, 7)"/>
         <variable name="idCheckDigit" select="substring($str, 8, 1)"/>
         <variable name="computedCheckDigit" select="hwh-xsl:compute-check-digit($idStr)"/>
         <variable name="check" select="$computedCheckDigit = $idCheckDigit"/>
         <value-of select="$check"/>
      </function>
      <pattern id="idCheckDigit">
         <rule context="@key | @xml:id[not(parent::tei:layout)] | @sameAs | @codedval | tei:ref[@type='deletion' or @type='duplicate']/@target">
            <assert test="hwh-xsl:checkIdByCheckDigit(.) = true()" role="fatal">Something went wrong with the ID: <value-of select="."/>. Computed check digit is <value-of select="hwh-xsl:compute-check-digit(.)"/>.</assert>
         </rule>
      </pattern>
   </schema>
   <schema queryBinding="xslt2">
      <function xmlns="http://www.w3.org/1999/XSL/Transform"
                name="functx:escape-for-regex"
                as="xs:string">
         <param name="arg" as="xs:string?"/>
         <sequence select="replace($arg, '(\.|\[|\]|\\|\||\-|\^|\$|\?|\*|\+|\{|\}|\(|\))','\\$1')"/>
      </function>
      <function xmlns="http://www.w3.org/1999/XSL/Transform"
                name="functx:substring-before-last"
                as="xs:string">
         <param name="arg" as="xs:string?"/>
         <param name="delim" as="xs:string"/>
         <sequence select="if (matches($arg, functx:escape-for-regex($delim))) then replace($arg, concat('^(.*)', functx:escape-for-regex($delim),'.*'), '$1') else ''"/>
      </function>
      <function xmlns="http://www.w3.org/1999/XSL/Transform"
                name="functx:substring-after-last"
                as="xs:string">
         <param name="arg" as="xs:string?"/>
         <param name="delim" as="xs:string"/>
         <sequence select="replace ($arg,concat('^.*', functx:escape-for-regex($delim)),'')"/>
      </function>
      <pattern id="checkFilesNameAndDir">
         <rule context="root()">
            <let name="docUri" value="document-uri(.)"/>
            <let name="fileName"
                 value="functx:substring-after-last(substring-before($docUri, '.xml'), '/')"/>
            <let name="fileDir"
                 value="functx:substring-after-last(functx:substring-before-last($docUri, '/'), '/')"/>
            <assert test="./node()/@xml:id = $fileName" role="error">The id of this record does not match the files name. Please check!</assert>
            <assert test="$fileDir = concat(substring($fileName,1,6),'xx')" role="error">The file is stored in the wrong directory. Please check!</assert>
         </rule>
      </pattern>
   </schema>
   <pattern id="schematron-constraint-hwhOrgs-addWithoutPlace-64">
      <rule context="tei:add[not(parent::tei:subst)]">
         <assert test="@place">Missing @place, because this is no substitution here.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-nameTypeRequirement-65">
      <rule context="tei:name[not(ancestor::tei:teiHeader)]">
         <assert test="@type">@type is required at <name/>.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-lbInsideAddress-66">
      <rule context="tei:lb">
         <report test="parent::tei:address" role="info">Does <name/> mark a new line inside the address? If yes, please use &lt;addrLine&gt; instead of <name/>
         </report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-renditionWithPosition-67">
      <rule context="tei:addrLine[@rend and not(contains(@rend,' '))] | tei:dateline[@rend and not(contains(@rend,' '))]">
         <assert test="@rend = ('right','center','left')">If only one value is set, it should should address the horizontal position ('right','center','left')</assert>
      </rule>
      <rule context="tei:addrLine[@rend] | tei:dateline[@rend]">
         <assert test="tokenize(@rend, ' ')[1] = ('top','middle','bottom','inline')">the first value should address the vertical position ('top','middle','bottom')</assert>
         <assert test="tokenize(@rend, ' ')[2] = ('right','center','left')">the second value should address the horizontal position ('right','center','left')</assert>
      </rule>
   </pattern>
   <pattern id="node-typeNkey" abstract="true">
      <rule context="$node[@type='person'][@key]|$node[@type='character'][@key]|$node[@type='actingRole'][@key]|$node[@type='myth'][@key]">
         <assert test="matches(@key, '^A00[0-9A-F]{5}$')">A type value of 'person' must have only one key, starting with 'A00'</assert>
      </rule>
      <rule context="$node[@type='persons'][@key]|$node[@type='characters'][@key]|$node[@type='actingRoles'][@key]|$node[@type='myths'][@key]">
         <assert test="matches(@key, '^(A00[0-9A-F]{5}\s)*A00[0-9A-F]{5}$')">A type value of 'persons' must have at least one key, each starting with 'A00'</assert>
      </rule>
      <rule context="$node[@type='work'][@key]">
         <assert test="matches(@key, '^A02[0-9A-F]{5}$')">A type value of 'work' must have only one key, starting with 'A02'</assert>
      </rule>
      <rule context="$node[@type='works'][@key]">
         <assert test="matches(@key, '^(A02[0-9A-F]{5}\s)*A02\d{5}$')">A type value of 'works' must have at least one key, each starting with 'A02'</assert>
      </rule>
      <rule context="$node[@type='writing'][@key]">
         <assert test="matches(@key, '^A03[0-9A-F]{5}$')">A type value of 'writing' must have only one key, starting with 'A03'</assert>
      </rule>
      <rule context="$node[@type='writings'][@key]">
         <assert test="matches(@key, '^(A03[0-9A-F]{5}\s)*A03[0-9A-F]{5}$')">A type value of 'writings' must have at least one key, each starting with 'A03'</assert>
      </rule>
      <rule context="$node[@type='postal'][@key]">
         <assert test="matches(@key, '^A04[0-9A-F]{5}$')">A type value of 'letter' must have only one key, starting with 'A04'</assert>
      </rule>
      <rule context="$node[@type='postals'][@key]">
         <assert test="matches(@key, '^(A04[0-9A-F]{5}\s)*A04[0-9A-F]{5}$')">A type value of 'letters' must have at least one key, each starting with 'A04'</assert>
      </rule>
      <rule context="$node[@type='news'][@key]">
         <assert test="matches(@key, '^(A05[0-9A-F]{5}\s)*A05[0-9A-F]{5}$')">A type value of 'news' must have at least one key, starting with 'A05'</assert>
      </rule>
      <rule context="$node[@type='diaryDay'][@key]">
         <assert test="matches(@key, '^A06[0-9A-F]{5}$')">A type value of 'diaryDay' must have only one key, starting with 'A06'</assert>
      </rule>
      <rule context="$node[@type='diaryDays'][@key]">
         <assert test="matches(@key, '^(A06[0-9A-F]{5}\s)*A06[0-9A-F]{5}$')">A type value of 'diaryDays' must have at least one key, each starting with 'A06'</assert>
      </rule>
      <rule context="$node[@type='org'][@key]">
         <assert test="matches(@key, '^A08[0-9A-F]{5}$')">A type value of 'org' must have only one key, starting with 'A08'</assert>
      </rule>
      <rule context="$node[@type='orgs'][@key]">
         <assert test="matches(@key, '^(A08\d{5}\s)*A08\d{5}$')">A type value of 'orgs' must have at least one key, each starting with 'A08'</assert>
      </rule>
      <rule context="$node[@type='document'][@key]">
         <assert test="matches(@key, '^A10\d{5}$')">A type value of 'document' must have only one key, starting with 'A10'</assert>
      </rule>
      <rule context="$node[@type='documents'][@key]">
         <assert test="matches(@key, '^(A10[0-9A-F]{5}\s)*A10[0-9A-F]{5}$')">A type value of 'documents' must have at least one key, each starting with 'A10'</assert>
      </rule>
      <rule context="$node[@type='biblio'][@key]">
         <assert test="matches(@key, '^(A11[0-9A-F]{5}\s)*A11[0-9A-F]{5}$')">A type value of 'biblio' must have at least one key, each starting with 'A11'</assert>
      </rule>
      <rule context="$node[@type='addenda'][@key]">
         <assert test="matches(@key, '^A12[0-9A-F]{5}$')">A type value of 'addenda' must have only one key, starting with 'A12'</assert>
      </rule>
      <rule context="$node[@type='place'][@key] | $node[@type='venue'][@key]">
         <assert test="matches(@key, '^A13[0-9A-F]{5}$')">A type value of 'place' must have only one key, starting with 'A13'</assert>
      </rule>
      <rule context="$node[@type='places'][@key]">
         <assert test="matches(@key, '^(A13[0-9A-F]{5}\s)*A13[0-9A-F]{5}$')">A type value of 'places' must have at least one key, each starting with 'A13'</assert>
      </rule>
      <rule context="$node[@type='mixed'][@key]">
         <assert test="count(distinct-values(for $i in tokenize(@key, '\s+') return substring($i, 1, 3))) gt 1">A type value of 'mixed' must have keys referring to different document types</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-importName-69">
      <rule context="tei:persName | tei:orgName | tei:placeName">
         <report test="@type='import'" role="info">This element should be deleted after checking this record.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hwhOrgs-att.hwh.rend-underline-n-70">
      <rule context="*:hi[@n] | *:rend[@n]">
         <report test="@rend ne 'underline'">The @n-attribute is only supported in combination with @rend='underline'</report>
      </rule>
   </pattern>
</schema>
