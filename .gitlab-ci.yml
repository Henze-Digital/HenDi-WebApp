# GitLab CI configuration for the "HenDi-WebApp"
variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    IMAGE_TAG_BASE: $CI_REGISTRY_IMAGE/hendi-webapp-base-image:develop
    GIT_SUBMODULE_STRATEGY: recursive

stages:
  - update
  - build
  - deploy

update-submodules:
  stage: update
  image: $IMAGE_TAG_BASE
  script:
    - git config user.email "${GITLAB_USER_EMAIL}"
    - git config user.name "${GITLAB_USER_NAME}"
    - git config pull.rebase true
    - git remote set-url origin https://${HENDI_DATA_CI_TOKEN_NAME}:${HENDI_DATA_CI_TOKEN}@git.uni-paderborn.de/vife/henze-digital/hwh-webapp.git
    - git pull origin ${CI_COMMIT_REF_NAME} #--allow-unrelated-histories
    - cd submodules/HenDi-ODD
    - git checkout develop
    - git pull
    - cd ../../
    - |- 
      if [[ -z $(git status -s) ]];
      then
        echo "No changes detected. Nothing to commit."
      else
        git add submodules/HenDi-ODD
        git commit -m "auto update submodule"
        git push origin HEAD:${CI_COMMIT_REF_NAME} -o ci.skip
      fi
  only:
    variables:
      - $TRIGGER_UPDATE_SUBMODULE == "true"

build-base-image:
  stage: build
  image: docker:20.10
  services:
    - docker:20.10-dind
  rules:
    - if: '$cronBuildBaseImage == "true"'
      changes:
        - Dockerfile.baseImage
      when: always
    - when: never
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker run --privileged --rm tonistiigi/binfmt --install all
    - docker buildx create --name mybuilder --use
    - docker buildx build --build-arg CI_JOB_TOKEN=${CI_JOB_TOKEN} --platform linux/arm64,linux/amd64 --push -t ${IMAGE_TAG_BASE} -f Dockerfile.baseImage .

build-webapp:
  stage: build
  image: $IMAGE_TAG_BASE
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - ant xar -Dsass.path=`which sass` -Dminify.path=`which minify` -Dbuild.env=`ci` -DCI_JOB_TOKEN=${CI_JOB_TOKEN}
  only:
    refs:
      - merge_requests
      - develop
    variables:
      - ($cronUpdatePortalIntern == "true" || $BUILD_PORTAL_STAGING == "true")
  except:
    variables:
      - $cronBuildBaseImage == "true"
  artifacts:
    paths:
      - hendi-pkg-webapp/HenDi-WebApp-*.xar

build-webapp-stable:
  stage: build
  image: $IMAGE_TAG_BASE
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - ant xar -Dsass.path=`which sass` -Dminify.path=`which minify` -Dbuild.env=`ci` -DCI_JOB_TOKEN=${CI_JOB_TOKEN}
  only:
    refs:
      - stable
  except:
    variables:
      - $cronBuildBaseImage == "true"
  artifacts:
    paths:
      - hendi-pkg-webapp-stable/HenDi-WebApp-*.xar

build-webapp-docker-image:
  stage: build
  image: docker:20.10
  services:
    - docker:20.10-dind
  needs: [build-webapp]
  dependencies:
    - build-webapp
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker run --privileged --rm tonistiigi/binfmt --install all
    - docker buildx create --name mybuilder --use
    - docker buildx build --build-arg CI_JOB_TOKEN=${CI_JOB_TOKEN} --platform linux/arm64,linux/amd64 --push -t ${IMAGE_TAG} .
  only:
    refs:
      - merge_requests
      - develop
    variables:
      - ($cronUpdatePortalIntern == "true" || $BUILD_PORTAL_STAGING == "true")
  except:
    variables:
      - ($cronBuildBaseImage == "true" || $BUILD_PORTAL_STAGING == "true")

build-webapp-docker-image-staging:
  stage: build
  image: docker:20.10
  services:
    - docker:20.10-dind
  needs: [build-webapp]
  dependencies:
    - build-webapp
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker run --privileged --rm tonistiigi/binfmt --install all
    - docker buildx create --name mybuilder --use
    - docker buildx build --build-arg CI_JOB_TOKEN=${CI_JOB_TOKEN} --platform linux/arm64,linux/amd64 --push -t ${IMAGE_TAG}-staging -f Dockerfile.staging .
  only:
    refs:
      #- merge_requests
      - develop
    variables:
      - $BUILD_PORTAL_STAGING == "true"
  except:
    variables:
      - $cronBuildBaseImage == "true"
      
build-webapp-docker-image-stable:
  stage: build
  image: docker:20.10
  services:
    - docker:20.10-dind
  needs: [build-webapp-stable]
  dependencies:
    - build-webapp-stable
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker run --privileged --rm tonistiigi/binfmt --install all
    - docker buildx create --name mybuilder --use
    - docker buildx build --build-arg CI_JOB_TOKEN=${CI_JOB_TOKEN} --platform linux/arm64,linux/amd64 --push -t ${IMAGE_TAG}-staging -f Dockerfile.stable .
  only:
    refs:
      - merge_requests
      - stable
    variables:
      - $BUILD_PORTAL_STABLE == "true"
  except:
    variables:
      - $cronBuildBaseImage == "true"

deploy-webapp:
  stage: deploy
  image: curlimages/curl
  needs: [build-webapp-docker-image]
  script:
    - >
      curl -X POST https://keel3.edirom.de/v1/webhooks/native -H 'Content-Type: application/json' -d '{"name": "'${CI_REGISTRY_IMAGE}'", "tag": "'${CI_COMMIT_REF_SLUG}'"}'
  only:
    refs:
      - develop
    variables:
      - ($cronUpdatePortalIntern == "true" || $CI_COMMIT_MESSAGE  =~ /\(ready\)/ )
  except:
    variables:
      - ($cronBuildBaseImage == "true" || $BUILD_PORTAL_STAGING == "true")

deploy-webapp-staging:
  stage: deploy
  image: curlimages/curl
  needs: [build-webapp-docker-image-staging]
  script:
    - >
      curl -X POST https://keel3.edirom.de/v1/webhooks/native -H 'Content-Type: application/json' -d '{"name": "'${CI_REGISTRY_IMAGE}'", "tag": "'${CI_COMMIT_REF_SLUG}-staging'"}'
  only:
    refs:
      - develop
    variables:
      - ($CI_COMMIT_MESSAGE  =~ /\(staging\)/ || $BUILD_PORTAL_STAGING == "true")
  except:
    variables:
      - $cronBuildBaseImage == "true"

deploy-webapp-stable:
  stage: deploy
  image: curlimages/curl
  needs: [build-webapp-docker-image-stable]
  script:
    - >
      curl -X POST https://keel3.edirom.de/v1/webhooks/native -H 'Content-Type: application/json' -d '{"name": "'${CI_REGISTRY_IMAGE}'", "tag": "'${CI_COMMIT_REF_SLUG}-stable'"}'
  only:
    refs:
      - stable
    variables:
      - ($CI_COMMIT_MESSAGE  =~ /\(stable\)/ || $BUILD_PORTAL_STABLE == "true")
  except:
    variables:
      - $cronBuildBaseImage == "true"
